friedmanControl("Control Awareness - High Acuity", "./Tests./Acuity./Likert Ratings Control_HighAcuity_Awareness", "./Plots./Likert./Acuity", Data_ctrl_HighAcuity, "Awareness", "runTests" = TRUE, "addJitter" = FALSE)
friedmanTests("Median - High Acuity", "./Tests./Acuity./Likert Ratings_HighAcuity_Median", "./Plots./Likert./Acuity", Data_avg_HighAcuity, "Median.Rating", "runTests" = TRUE, "addJitter" = FALSE)
Data_avg_HighAcuity <- Data_avg %>% filter(Participant.ID %in% highAcuity)
# Likert ratings
# Low acuity
friedmanControl("Control Median - Low Acuity", "./Tests./Acuity./Likert Ratings Control_LowAcuity_Median", "./Plots./Likert./Acuity", Data_ctrl_LowAcuity, "Median.Rating", "runTests" = TRUE, "addJitter" = FALSE)
friedmanControl("Control Confidence - Low Acuity", "./Tests./Acuity./Likert Ratings Control_LowAcuity_Confidence", "./Plots./Likert./Acuity", Data_ctrl_LowAcuity, "Confidence", "runTests" = TRUE, "addJitter" = FALSE)
friedmanControl("Control Obstacle Location - Low Acuity", "./Tests./Acuity./Likert Ratings Control_LowAcuity_Obstacle Location", "./Plots./Likert./Acuity", Data_ctrl_LowAcuity, "Obstacle.location", "runTests" = TRUE, "addJitter" = FALSE)
friedmanControl("Control Obstacle Size  - Low Acuity", "./Tests./Acuity./Likert Ratings Control_LowAcuity_Obstacle Size", "./Plots./Likert./Acuity", Data_ctrl_LowAcuity, "Obstacle.size", "runTests" = TRUE, "addJitter" = FALSE)
friedmanControl("Control Awareness - Low Acuity", "./Tests./Acuity./Likert Ratings Control_LowAcuity_Awareness", "./Plots./Likert./Acuity", Data_ctrl_LowAcuity, "Awareness", "runTests" = TRUE, "addJitter" = FALSE)
friedmanTests("Median - Low Acuity", "./Tests./Acuity./Likert Ratings_LowAcuity_Median", "./Plots./Likert./Acuity", Data_avg_LowAcuity, "Median.Rating", "runTests" = TRUE, "addJitter" = FALSE)
friedmanTests("Confidence - Low Acuity", "./Tests./Acuity./Likert Ratings_LowAcuity_Confidence", "./Plots./Likert./Acuity", Data_avg_LowAcuity, "Confidence", "runTests" = TRUE, "addJitter" = FALSE)
friedmanTests("Obstacle Location - Low Acuity", "./Tests./Acuity./Likert Ratings_LowAcuity_Obstacle Location", "./Plots./Likert./Acuity", Data_avg_LowAcuity, "Obstacle.location", "runTests" = TRUE, "addJitter" = FALSE)
friedmanTests("Obstacle Size - Low Acuity", "./Tests./Acuity./Likert Ratings_LowAcuity_Obstacle Size", "./Plots./Likert./Acuity", Data_avg_LowAcuity, "Obstacle.size","runTests" = TRUE, "addJitter" = FALSE)
friedmanTests("Awareness - Low Acuity", "./Tests./Acuity./Likert Ratings_LowAcuity_Awareness", "./Plots./Likert./Acuity", Data_avg_LowAcuity, "Awareness", "runTests" = TRUE, "addJitter" = FALSE)
# High acuity
friedmanControl("Control Median - High Acuity", "./Tests./Acuity./Likert Ratings Control_HighAcuity_Median", "./Plots./Likert./Acuity", Data_ctrl_HighAcuity, "Median.Rating", "runTests" = TRUE, "addJitter" = FALSE)
friedmanControl("Control Confidence - High Acuity", "./Tests./Acuity./Likert Ratings Control_HighAcuity_Confidence", "./Plots./Likert./Acuity", Data_ctrl_HighAcuity, "Confidence", "runTests" = TRUE, "addJitter" = FALSE)
friedmanControl("Control Obstacle Location - High Acuity", "./Tests./Acuity./Likert Ratings Control_HighAcuity_Obstacle Location", "./Plots./Likert./Acuity", Data_ctrl_HighAcuity, "Obstacle.location", "runTests" = TRUE, "addJitter" = FALSE)
friedmanControl("Control Obstacle Size  - High Acuity", "./Tests./Acuity./Likert Ratings Control_HighAcuity_Obstacle Size", "./Plots./Likert./Acuity", Data_ctrl_HighAcuity, "Obstacle.size", "runTests" = TRUE, "addJitter" = FALSE)
friedmanControl("Control Awareness - High Acuity", "./Tests./Acuity./Likert Ratings Control_HighAcuity_Awareness", "./Plots./Likert./Acuity", Data_ctrl_HighAcuity, "Awareness", "runTests" = TRUE, "addJitter" = FALSE)
friedmanTests("Median - High Acuity", "./Tests./Acuity./Likert Ratings_HighAcuity_Median", "./Plots./Likert./Acuity", Data_avg_HighAcuity, "Median.Rating", "runTests" = TRUE, "addJitter" = FALSE)
friedmanTests("Confidence - High Acuity", "./Tests./Acuity./Likert Ratings_HighAcuity_Confidence", "./Plots./Likert./Acuity", Data_avg_HighAcuity, "Confidence", "runTests" = TRUE, "addJitter" = FALSE)
friedmanTests("Obstacle Location - High Acuity", "./Tests./Acuity./Likert Ratings_HighAcuity_Obstacle Location", "./Plots./Likert./Acuity", Data_avg_HighAcuity, "Obstacle.location", "runTests" = TRUE, "addJitter" = FALSE)
friedmanTests("Obstacle Size - High Acuity", "./Tests./Acuity./Likert Ratings_HighAcuity_Obstacle Size", "./Plots./Likert./Acuity", Data_avg_HighAcuity, "Obstacle.size","runTests" = TRUE, "addJitter" = FALSE)
friedmanTests("Awareness - High Acuity", "./Tests./Acuity./Likert Ratings_HighAcuity_Awareness", "./Plots./Likert./Acuity", Data_avg_HighAcuity, "Awareness", "runTests" = TRUE, "addJitter" = FALSE)
# Qualitative data
#TIME
plotAndAnova("Time by Condition - Low Acuity", "./Tests./Acuity./Time_Low Acuity", "./Plots./Acuity./Time", Data_avg_noErr_LowAcuity, TRUE, "Calibrated.Time", "Time (s)", c(10,40))
plotAndAnova("Time by Condition - High Acuity", "./Tests./Acuity./Time_High Acuity", "./Plots./Acuity./Time", Data_avg_noErr_HighAcuity, TRUE, "Calibrated.Time", "Time (s)", c(10,40))
#PPWS
plotAndAnova("PPWS by Condition - Low Acuity", "./Tests./Acuity./PPWS_Low Acuity", "./Plots./Acuity./PPWS", Data_avg_noErr_LowAcuity, TRUE, "PPWS", "Percentage of Preferred Walking Speed")
plotAndAnova("PPWS by Condition - High Acuity", "./Tests./Acuity./PPWS_High Acuity", "./Plots./Acuity./PPWS", Data_avg_noErr_HighAcuity, TRUE, "PPWS", "Percentage of Preferred Walking Speed")
#ERRORS
plotAndAnova("Errors by Condition - Low Acuity", "./Tests./Acuity./Errors_Low Acuity", "./Plots./Acuity./Errors", Data_avg_noErr_LowAcuity, TRUE, "Errors", "Number of Errors")
plotAndAnova("Errors by Condition - High Acuity", "./Tests./Acuity./Errors_High Acuity", "./Plots./Acuity./Errors", Data_avg_noErr_HighAcuity, TRUE, "Errors", "Number of Errors")
#DISTANCE
plotAndAnova("Distance by Condition - Low Acuity", "./Tests./Acuity./Distance_Low Acuity", "./Plots./Acuity./Distance",
Data_avg_noErr_LowAcuity, inclControl = FALSE, "Calibrated.Distance", "Total Distance Walked (m)", c(15, 17))
plotAndAnova("Distance by Condition - High Acuity", "./Tests./Acuity./Distance_High Acuity", "./Plots./Acuity./Distance",
Data_avg_noErr_HighAcuity, inclControl = FALSE, "Calibrated.Distance", "Total Distance Walked (m)", c(15, 17))
#SPEED
plotAndAnova("Average Speed by Condition - Low Acuity", "./Tests./Acuity./Speed Average_Low Acuity", "./Plots./Acuity./Speed", Data_avg_noErr_LowAcuity, FALSE, "Average.Speed", "Average Speed (m/s)")
plotAndAnova("Average Speed by Condition - High Acuity", "./Tests./Acuity./Speed Average_High Acuity", "./Plots./Acuity./Speed", Data_avg_noErr_HighAcuity, FALSE, "Average.Speed", "Average Speed (m/s)")
plotAndAnova("Percentage Stopped - Low Acuity", "./Tests./Acuity./Percent Stopped_Low Acuity", "./Plots./Acuity./Speed", Data_avg_noErr_LowAcuity, inclControl = FALSE, "Percent.Stopped", "Percentage", c(0, 1.5))
plotAndAnova("Percentage Stopped - High Acuity", "./Tests./Acuity./Percent Stopped_High Acuity", "./Plots./Acuity./Speed", Data_avg_noErr_HighAcuity, inclControl = FALSE, "Percent.Stopped", "Percentage", c(0, 1.5))
plotAndAnova("Percentage Slowed - Low Acuity", "./Tests./Acuity./Percent Slowed_Low Acuity", "./Plots./Acuity./Speed", Data_avg_noErr_LowAcuity, inclControl = FALSE, "Percent.Slowed", "Percentage", c(0, 16))
plotAndAnova("Percentage Slowed - High Acuity", "./Tests./Acuity./Percent Slowed_High Acuity", "./Plots./Acuity./Speed", Data_avg_noErr_HighAcuity, inclControl = FALSE, "Percent.Slowed", "Percentage", c(0, 16))
plotAndAnova("Speed Variance - Low Acuity", "./Tests./Acuity./Speed Variance_Low Acuity", "./Plots./Acuity./Speed", Data_avg_noErr_LowAcuity, inclControl = FALSE, "Speed.Variance", "Speed Variance (m/s)^2")
plotAndAnova("Speed Variance - High Acuity", "./Tests./Acuity./Speed Variance_High Acuity", "./Plots./Acuity./Speed", Data_avg_noErr_HighAcuity, inclControl = FALSE, "Speed.Variance", "Speed Variance (m/s)^2")
plotAndAnova("Speed Variance Corrected - Low Acuity", "./Tests./Acuity./Speed Variance Corrected_Low Acuity", "./Plots./Acuity./Speed", inclControl = Data_avg_noErr_LowAcuity, FALSE, "Speed.Variance.Corrected", "Speed Variance Corrected", c(0, 0.35))
plotAndAnova("Speed Variance Corrected - Low Acuity", "./Tests./Acuity./Speed Variance Corrected_Low Acuity", "./Plots./Acuity./Speed", Data_avg_noErr_LowAcuity, inclControl = FALSE, "Speed.Variance.Corrected", "Speed Variance Corrected", c(0, 0.35))
plotAndAnova("Speed Variance Corrected - High Acuity", "./Tests./Acuity./Speed Variance Corrected_High Acuity", "./Plots./Acuity./Speed", Data_avg_noErr_HighAcuity, inclControl = FALSE, "Speed.Variance.Corrected", "Speed Variance Corrected", c(0, 0.35))
#X Rotation (Pitch) Per Second
plotAndAnova("X Rotation (Pitch) - Low Acuity", "./Tests./Acuity./Rotation X per second_Low Acuity", "./Plots./Acuity./Rotation Per Second",
Data_avg_noErr_LowAcuity, inclControl = FALSE, "rotSpeedX", "Rotation (degrees per second)", c(10, 35))
#X Rotation (Pitch) Per Second
plotAndAnova("X Rotation (Pitch) - Low Acuity", "./Tests./Acuity./Rotation X per second_Low Acuity", "./Plots./Acuity./Rotation Per Second",
Data_avg_noErr_LowAcuity, inclControl = FALSE, "rotSpeedX", "Rotation (degrees per second)", c(10, 35))
plotAndAnova("X Rotation (Pitch) - High Acuity", "./Tests./Acuity./Rotation X per second_High Acuity", "./Plots./Acuity./Rotation Per Second",
Data_avg_noErr_HighAcuity, inclControl = FALSE, "rotSpeedX", "Rotation (degrees per second)", c(10, 35))
#Y Rotation (Yaw) Per Second
plotAndAnova("Y Rotation (Yaw) - Low Acuity", "./Tests./Acuity./Rotation Y per second_Low Acuity", "./Plots./Acuity./Rotation Per Second",
Data_avg_noErr_LowAcuity, inclControl = FALSE, "rotSpeedY", "Rotation (degrees per second)", c(10, 35))
plotAndAnova("Y Rotation (Yaw) - High Acuity", "./Tests./Acuity./Rotation Y per second_High Acuity", "./Plots./Acuity./Rotation Per Second",
Data_avg_noErr_HighAcuity, inclControl = FALSE, "rotSpeedY", "Rotation (degrees per second)", c(10, 35))
#Z Rotation (Roll) Per Second
plotAndAnova("Z Rotation (Roll) - Low Acuity", "./Tests./Acuity./Rotation Z per second_Low Acuity", "./Plots./Acuity./Rotation Per Second",
Data_avg_noErr_LowAcuity, inclControl = FALSE, "rotSpeedZ", "Rotation (degrees per second)")
plotAndAnova("Z Rotation (Roll) - High Acuity", "./Tests./Acuity./Rotation Z per second_High Acuity", "./Plots./Acuity./Rotation Per Second",
Data_avg_noErr_HighAcuity, inclControl = FALSE, "rotSpeedZ", "Rotation (degrees per second)")
source("compareCSVs.R")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
force(outputPath)
files1
files2
files1(1)
files1[1]
files1[5]
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("friedmanTests.R")
#Run basic Friedman tests
friedmanTests("Median Ratings", "./Tests./Likert Ratings_Median", "./Plots./Likert", Data_avg, "Median.Rating", "runTests" = TRUE, "addJitter" = FALSE)
friedmanTests("Confidence Ratings", "./Tests./Likert Ratings_Confidence", "./Plots./Likert", Data_avg, "Confidence", "runTests" = TRUE, "addJitter" = FALSE, followup = "Wilcox")
friedmanTests("Obstacle Location Ratings",  "./Tests./Likert Ratings_Obstacle Location", "./Plots./Likert", Data_avg, "Obstacle.location", "runTests" = TRUE, "addJitter" = FALSE)
friedmanTests("Obstacle Size Ratings", "./Tests./Likert Ratings_Obstacle Size", "./Plots./Likert", Data_avg, "Obstacle.size", "runTests" = TRUE, "addJitter" = FALSE)
friedmanTests("Awareness Ratings", "./Tests./Likert Ratings_Awareness", "./Plots./Likert", Data_avg, "Awareness", "runTests" = TRUE, "addJitter" = FALSE)
friedmanTests("Median - World Preference", "./Tests./Preferred./Likert Ratings_WorldPref_Median", "./Plots./Likert./Preference", Data_avg_WorldPref, "Median.Rating", "runTests" = FALSE, "addJitter" = FALSE)
friedmanTests("Confidence - World Preference", "./Tests./Preferred./Likert Ratings_WorldPref_Confidence", "./Plots./Likert./Preference", Data_avg_WorldPref, "Confidence", "runTests" = FALSE, "addJitter" = FALSE)
friedmanTests("Obstacle Location - World Preference", "./Tests./Preferred./Likert Ratings_WorldPref_Obstacle Location", "./Plots./Likert./Preference", Data_avg_WorldPref, "Obstacle.location", "runTests" = FALSE, "addJitter" = FALSE)
friedmanTests("Obstacle Size - World Preference", "./Tests./Preferred./Likert Ratings_WorldPref_Obstacle Size", "./Plots./Likert./Preference", Data_avg_WorldPref, "Obstacle.size","runTests" = FALSE, "addJitter" = FALSE)
friedmanTests("Awareness - World Preference", "./Tests./Preferred./Likert Ratings_WorldPref_Awareness", "./Plots./Likert./Preference", Data_avg_WorldPref, "Awareness", "runTests" = FALSE, "addJitter" = FALSE)
friedmanTests("Median - Head Preference", "./Tests./Preferred./Likert Ratings_HeadPref_Median", "./Plots./Likert./Preference", Data_avg_HeadPref, "Median.Rating", "runTests" = FALSE, "addJitter" = FALSE)
friedmanTests("Confidence - Head Preference", "./Tests./Preferred./Likert Ratings_HeadPref_Confidence", "./Plots./Likert./Preference", Data_avg_HeadPref, "Confidence", "runTests" = FALSE, "addJitter" = FALSE)
friedmanTests("Obstacle Location - Head Preference", "./Tests./Preferred./Likert Ratings_HeadPref_Obstacle Location", "./Plots./Likert./Preference", Data_avg_HeadPref, "Obstacle.location", "runTests" = FALSE, "addJitter" = FALSE)
friedmanTests("Obstacle Size - Head Preference", "./Tests./Preferred./Likert Ratings_HeadPref_Obstacle Size", "./Plots./Likert./Preference", Data_avg_HeadPref, "Obstacle.size","runTests" = FALSE, "addJitter" = FALSE)
friedmanTests("Awareness - Head Preference", "./Tests./Preferred./Likert Ratings_HeadPref_Awareness", "./Plots./Likert./Preference", Data_avg_HeadPref, "Awareness", "runTests" = FALSE, "addJitter" = FALSE)
source("friedmanTests.R")
source("friedmanTests.R")
#Run basic Friedman tests
friedmanTests("Median Ratings", "./Tests./Likert Ratings_Median", "./Plots./Likert", Data_avg, "Median.Rating", "runTests" = TRUE, "addJitter" = FALSE)
friedmanTests("Confidence Ratings", "./Tests./Likert Ratings_Confidence", "./Plots./Likert", Data_avg, "Confidence", "runTests" = TRUE, "addJitter" = FALSE, followup = "Wilcox")
friedmanTests("Obstacle Location Ratings",  "./Tests./Likert Ratings_Obstacle Location", "./Plots./Likert", Data_avg, "Obstacle.location", "runTests" = TRUE, "addJitter" = FALSE)
friedmanTests("Obstacle Size Ratings", "./Tests./Likert Ratings_Obstacle Size", "./Plots./Likert", Data_avg, "Obstacle.size", "runTests" = TRUE, "addJitter" = FALSE)
friedmanTests("Awareness Ratings", "./Tests./Likert Ratings_Awareness", "./Plots./Likert", Data_avg, "Awareness", "runTests" = TRUE, "addJitter" = FALSE)
#Filter data (Likert)
Data_ctrl_HeadPref <- Data_ctrl %>% filter(Participant.ID == "OA01" | Participant.ID == "OA05" |
Participant.ID == "OA07" | Participant.ID == "OA12" |
Participant.ID == "OA13" | Participant.ID == "OA15" |
Participant.ID == "OA18" | Participant.ID == "OA20" )
Data_ctrl_WorldPref <- Data_ctrl %>% filter(Participant.ID != "OA01" & Participant.ID != "OA05" &
Participant.ID != "OA07" & Participant.ID != "OA12" &
Participant.ID != "OA13" & Participant.ID != "OA15" &
Participant.ID != "OA18" & Participant.ID != "OA20" )
Data_avg_HeadPref <- Data_avg %>% filter(Participant.ID == "OA01" | Participant.ID == "OA05" |
Participant.ID == "OA07" | Participant.ID == "OA12" |
Participant.ID == "OA13" | Participant.ID == "OA15" |
Participant.ID == "OA18" | Participant.ID == "OA20" )
Data_avg_WorldPref <- Data_avg %>% filter(Participant.ID != "OA01" & Participant.ID != "OA05" &
Participant.ID != "OA07" & Participant.ID != "OA12" &
Participant.ID != "OA13" & Participant.ID != "OA15" &
Participant.ID != "OA18" & Participant.ID != "OA20" )
friedmanTests("Median - World Preference", "./Tests./Preferred./Likert Ratings_WorldPref_Median", "./Plots./Likert./Preference", Data_avg_WorldPref, "Median.Rating", "runTests" = FALSE, "addJitter" = FALSE)
friedmanTests("Confidence - World Preference", "./Tests./Preferred./Likert Ratings_WorldPref_Confidence", "./Plots./Likert./Preference", Data_avg_WorldPref, "Confidence", "runTests" = FALSE, "addJitter" = FALSE)
friedmanTests("Obstacle Location - World Preference", "./Tests./Preferred./Likert Ratings_WorldPref_Obstacle Location", "./Plots./Likert./Preference", Data_avg_WorldPref, "Obstacle.location", "runTests" = FALSE, "addJitter" = FALSE)
friedmanTests("Obstacle Size - World Preference", "./Tests./Preferred./Likert Ratings_WorldPref_Obstacle Size", "./Plots./Likert./Preference", Data_avg_WorldPref, "Obstacle.size","runTests" = FALSE, "addJitter" = FALSE)
friedmanTests("Awareness - World Preference", "./Tests./Preferred./Likert Ratings_WorldPref_Awareness", "./Plots./Likert./Preference", Data_avg_WorldPref, "Awareness", "runTests" = FALSE, "addJitter" = FALSE)
friedmanTests("Median - Head Preference", "./Tests./Preferred./Likert Ratings_HeadPref_Median", "./Plots./Likert./Preference", Data_avg_HeadPref, "Median.Rating", "runTests" = FALSE, "addJitter" = FALSE)
friedmanTests("Confidence - Head Preference", "./Tests./Preferred./Likert Ratings_HeadPref_Confidence", "./Plots./Likert./Preference", Data_avg_HeadPref, "Confidence", "runTests" = FALSE, "addJitter" = FALSE)
friedmanTests("Obstacle Location - Head Preference", "./Tests./Preferred./Likert Ratings_HeadPref_Obstacle Location", "./Plots./Likert./Preference", Data_avg_HeadPref, "Obstacle.location", "runTests" = FALSE, "addJitter" = FALSE)
friedmanTests("Obstacle Size - Head Preference", "./Tests./Preferred./Likert Ratings_HeadPref_Obstacle Size", "./Plots./Likert./Preference", Data_avg_HeadPref, "Obstacle.size","runTests" = FALSE, "addJitter" = FALSE)
friedmanTests("Awareness - Head Preference", "./Tests./Preferred./Likert Ratings_HeadPref_Awareness", "./Plots./Likert./Preference", Data_avg_HeadPref, "Awareness", "runTests" = FALSE, "addJitter" = FALSE)
friedmanControl("Control Median - World Preference", "./Tests./Preferred./Likert Ratings Control_WorldPref_Median", "./Plots./Likert./Preference", Data_ctrl_WorldPref, "Median.Rating", "runTests" = FALSE, "addJitter" = FALSE)
friedmanControl("Control Confidence - World Preference", "./Tests./Preferred./Likert Ratings Control_WorldPref_Confidence", "./Plots./Likert./Preference", Data_ctrl_WorldPref, "Confidence", "runTests" = FALSE, "addJitter" = FALSE)
friedmanControl("Control Obstacle Location - World Preference", "./Tests./Preferred./Likert Ratings Control_WorldPref_Obstacle Location", "./Plots./Likert./Preference", Data_ctrl_WorldPref, "Obstacle.location", "runTests" = FALSE, "addJitter" = FALSE)
friedmanControl("Control Obstacle Size  - World Preference", "./Tests./Preferred./Likert Ratings Control_WorldPref_Obstacle Size", "./Plots./Likert./Preference", Data_ctrl_WorldPref, "Obstacle.size", "runTests" = FALSE, "addJitter" = FALSE)
friedmanControl("Control Awareness - World Preference", "./Tests./Preferred./Likert Ratings Control_WorldPref_Awareness", "./Plots./Likert./Preference", Data_ctrl_WorldPref, "Awareness", "runTests" = FALSE, "addJitter" = FALSE)
#Head Preference
friedmanControl("Control Median - Head Preference", "./Tests./Preferred./Likert Ratings Control_HeadPref_Median", "./Plots./Likert./Preference", Data_ctrl_HeadPref, "Median.Rating", "runTests" = FALSE, "addJitter" = FALSE)
friedmanControl("Control Confidence - Head Preference", "./Tests./Preferred./Likert Ratings Control_HeadPref_Confidence", "./Plots./Likert./Preference", Data_ctrl_HeadPref, "Confidence", "runTests" = FALSE, "addJitter" = FALSE)
friedmanControl("Control Obstacle Location - Head Preference", "./Tests./Preferred./Likert Ratings Control_HeadPref_Obstacle Location", "./Plots./Likert./Preference", Data_ctrl_HeadPref, "Obstacle.location", "runTests" = FALSE, "addJitter" = FALSE)
friedmanControl("Control Obstacle Size  - Head Preference", "./Tests./Preferred./Likert Ratings Control_HeadPref_Obstacle Size", "./Plots./Likert./Preference", Data_ctrl_HeadPref, "Obstacle.size", "runTests" = FALSE, "addJitter" = FALSE)
friedmanControl("Control Awareness - Head Preference", "./Tests./Preferred./Likert Ratings Control_HeadPref_Awareness", "./Plots./Likert./Preference", Data_ctrl_HeadPref, "Awareness", "runTests" = FALSE, "addJitter" = FALSE)
lowAcuity <- list("OA10", "OA06", "OA02", "OA17", "OA08", "OA07", "OA14", "OA12", "OA09", "OA13")
highAcuity <- list("OA15", "OA11", "OA03", "OA16", "OA05", "OA18", "OA20", "OA19", "OA04", "OA01")
Data_ctrl_LowAcuity <- Data_ctrl %>% filter(Participant.ID %in% lowAcuity)
Data_ctrl_HighAcuity <- Data_ctrl %>% filter(Participant.ID %in% highAcuity)
Data_avg_LowAcuity <- Data_avg %>% filter(Participant.ID %in% lowAcuity)
Data_avg_HighAcuity <- Data_avg %>% filter(Participant.ID %in% highAcuity)
Data_avg_noErr_LowAcuity <- Data_avg_noErr %>% filter(Participant.ID %in% lowAcuity)
Data_avg_noErr_HighAcuity <- Data_avg_noErr %>% filter(Participant.ID %in% highAcuity)
friedmanControl("Control Median - Low Acuity", "./Tests./Acuity./Likert Ratings Control_LowAcuity_Median", "./Plots./Likert./Acuity", Data_ctrl_LowAcuity, "Median.Rating", "runTests" = TRUE, "addJitter" = FALSE)
friedmanControl("Control Confidence - Low Acuity", "./Tests./Acuity./Likert Ratings Control_LowAcuity_Confidence", "./Plots./Likert./Acuity", Data_ctrl_LowAcuity, "Confidence", "runTests" = TRUE, "addJitter" = FALSE)
friedmanControl("Control Obstacle Location - Low Acuity", "./Tests./Acuity./Likert Ratings Control_LowAcuity_Obstacle Location", "./Plots./Likert./Acuity", Data_ctrl_LowAcuity, "Obstacle.location", "runTests" = TRUE, "addJitter" = FALSE)
friedmanControl("Control Obstacle Size  - Low Acuity", "./Tests./Acuity./Likert Ratings Control_LowAcuity_Obstacle Size", "./Plots./Likert./Acuity", Data_ctrl_LowAcuity, "Obstacle.size", "runTests" = TRUE, "addJitter" = FALSE)
friedmanControl("Control Awareness - Low Acuity", "./Tests./Acuity./Likert Ratings Control_LowAcuity_Awareness", "./Plots./Likert./Acuity", Data_ctrl_LowAcuity, "Awareness", "runTests" = TRUE, "addJitter" = FALSE)
friedmanTests("Median - Low Acuity", "./Tests./Acuity./Likert Ratings_LowAcuity_Median", "./Plots./Likert./Acuity", Data_avg_LowAcuity, "Median.Rating", "runTests" = TRUE, "addJitter" = FALSE)
friedmanTests("Confidence - Low Acuity", "./Tests./Acuity./Likert Ratings_LowAcuity_Confidence", "./Plots./Likert./Acuity", Data_avg_LowAcuity, "Confidence", "runTests" = TRUE, "addJitter" = FALSE)
friedmanTests("Obstacle Location - Low Acuity", "./Tests./Acuity./Likert Ratings_LowAcuity_Obstacle Location", "./Plots./Likert./Acuity", Data_avg_LowAcuity, "Obstacle.location", "runTests" = TRUE, "addJitter" = FALSE)
friedmanTests("Obstacle Size - Low Acuity", "./Tests./Acuity./Likert Ratings_LowAcuity_Obstacle Size", "./Plots./Likert./Acuity", Data_avg_LowAcuity, "Obstacle.size","runTests" = TRUE, "addJitter" = FALSE)
friedmanTests("Awareness - Low Acuity", "./Tests./Acuity./Likert Ratings_LowAcuity_Awareness", "./Plots./Likert./Acuity", Data_avg_LowAcuity, "Awareness", "runTests" = TRUE, "addJitter" = FALSE)
# High acuity
friedmanControl("Control Median - High Acuity", "./Tests./Acuity./Likert Ratings Control_HighAcuity_Median", "./Plots./Likert./Acuity", Data_ctrl_HighAcuity, "Median.Rating", "runTests" = TRUE, "addJitter" = FALSE)
friedmanControl("Control Confidence - High Acuity", "./Tests./Acuity./Likert Ratings Control_HighAcuity_Confidence", "./Plots./Likert./Acuity", Data_ctrl_HighAcuity, "Confidence", "runTests" = TRUE, "addJitter" = FALSE)
friedmanControl("Control Obstacle Location - High Acuity", "./Tests./Acuity./Likert Ratings Control_HighAcuity_Obstacle Location", "./Plots./Likert./Acuity", Data_ctrl_HighAcuity, "Obstacle.location", "runTests" = TRUE, "addJitter" = FALSE)
friedmanControl("Control Obstacle Size  - High Acuity", "./Tests./Acuity./Likert Ratings Control_HighAcuity_Obstacle Size", "./Plots./Likert./Acuity", Data_ctrl_HighAcuity, "Obstacle.size", "runTests" = TRUE, "addJitter" = FALSE)
friedmanControl("Control Awareness - High Acuity", "./Tests./Acuity./Likert Ratings Control_HighAcuity_Awareness", "./Plots./Likert./Acuity", Data_ctrl_HighAcuity, "Awareness", "runTests" = TRUE, "addJitter" = FALSE)
friedmanTests("Median - High Acuity", "./Tests./Acuity./Likert Ratings_HighAcuity_Median", "./Plots./Likert./Acuity", Data_avg_HighAcuity, "Median.Rating", "runTests" = TRUE, "addJitter" = FALSE)
friedmanTests("Confidence - High Acuity", "./Tests./Acuity./Likert Ratings_HighAcuity_Confidence", "./Plots./Likert./Acuity", Data_avg_HighAcuity, "Confidence", "runTests" = TRUE, "addJitter" = FALSE)
friedmanTests("Obstacle Location - High Acuity", "./Tests./Acuity./Likert Ratings_HighAcuity_Obstacle Location", "./Plots./Likert./Acuity", Data_avg_HighAcuity, "Obstacle.location", "runTests" = TRUE, "addJitter" = FALSE)
friedmanTests("Obstacle Size - High Acuity", "./Tests./Acuity./Likert Ratings_HighAcuity_Obstacle Size", "./Plots./Likert./Acuity", Data_avg_HighAcuity, "Obstacle.size","runTests" = TRUE, "addJitter" = FALSE)
friedmanTests("Awareness - High Acuity", "./Tests./Acuity./Likert Ratings_HighAcuity_Awareness", "./Plots./Likert./Acuity", Data_avg_HighAcuity, "Awareness", "runTests" = TRUE, "addJitter" = FALSE)
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
View(matches)
Q
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
View(matches)
typeof(match)
typeof(matches[match])
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
matches
matches[1]
typeof(matches[1])
toString(matches[1])
typeof(toString(matches[1]))
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
View(data)
View(data)
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
View(data1)
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
View(comparisonData)
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
View(comparisonData)
source("compareCSVs.R")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
View(data1)
View(data2)
View(data1)
View(data2)
View(data1)
View(data2)
View(data1)
View(data2)
View(data1)
View(data2)
View(data1)
View(data2)
View(comparisonData)
View(data1)
View(comparisonData)
View(data1)
View(data2)
View(data1)
View(data1)
source("compareCSVs.R")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
#TIME
plotAndAnova("Time by Condition", "./Tests./Time", "./Plots./Time", Data_avg_noErr, TRUE, "Calibrated.Time", "Time (s)", c(10,40))
#PPWS
plotAndAnova("PPWS by Condition", "./Tests./PPWS", "./Plots./PPWS", Data_avg_noErr, TRUE, "PPWS", "Percentage of Preferred Walking Speed")
#Also calculate average PPWS for first and last condition. Use Data_avg_controlComp
mean(as.numeric(Data_avg_controlComp$PPWS))
mean(as.numeric(Data_avg_controlComp_first$PPWS))
mean(as.numeric(Data_avg_controlComp_last$PPWS))
wilcox.test(as.numeric(Data_avg_controlComp$PPWS[Data_avg_controlComp$Condition == "Control (first)"]), as.numeric(Data_avg_controlComp$PPWS[Data_avg_controlComp$Condition == "Control (last)"]), paired = TRUE, alternative = "two.sided")
#ERRORS
plotAndAnova("Errors by Condition", "./Tests./Errors", "./Plots./Errors", Data_avg_noErr, TRUE, "Errors", "Number of Errors")
#DISTANCE
plotAndAnova("Distance by Condition", "./Tests./Distance", "./Plots./Distance",
Data_avg_noErr, FALSE, "Calibrated.Distance", "Total Distance Walked (m)", c(15, 17))
#SPEED
plotAndAnova("Average Speed by Condition", "./Tests./Speed Average", "./Plots./Speed", Data_avg_noErr, FALSE, "Average.Speed", "Average Speed (m/s)")
plotAndAnova("Percentage Stopped", "./Tests./Percent Stopped", "./Plots./Speed", Data_avg_noErr, FALSE, "Percent.Stopped", "Percentage", c(0, 1.5))
plotAndAnova("Percentage Slowed", "./Tests./Percent Slowed", "./Plots./Speed", Data_avg_noErr, FALSE, "Percent.Slowed", "Percentage", c(0, 16))
plotAndAnova("Speed Variance", "./Tests./Speed Variance", "./Plots./Speed", Data_avg_noErr, FALSE, "Speed.Variance", "Speed Variance (m/s)^2")
plotAndAnova("Speed Variance Corrected", "./Tests./Speed Variance Corrected", "./Plots./Speed", Data_avg_noErr, FALSE, "Speed.Variance.Corrected", "Speed Variance Corrected", c(0, 0.35))
#Percentage stopped by participant
graph_stopped_participant <- ddply(Data_avg_noErr, .(Participant.ID), summarise, mean = mean(Percent.Stopped))
figStopped <-  Data_avg_noErr %>%
filter(Condition != "Control") %>%
#mutate(Participant.ID = factor(Participant.ID, levels=defaultOrder )) %>%
ggplot(aes(x = Participant.ID, y = Percent.Stopped, color = Participant.ID))+
geom_point()+
#geom_jitter(width = 0.15)+
theme(legend.position = 'none')+
ggtitle("Percentage Stopped")+
#geom_label(data = graph_RotByID, aes(x = Participant.ID, y = mean, label = round(mean, digits=2), fontface="bold"), size = 5)+
scale_y_continuous(name="Percent Stopped")
print(figStopped)
#Percentage slowed by participant
graph_slowed_participant <- ddply(Data_avg_noErr, .(Participant.ID), summarise, mean = mean(Percent.Slowed))
figSlowed <-  Data_avg_noErr %>%
filter(Condition != "Control") %>%
#mutate(Participant.ID = factor(Participant.ID, levels=defaultOrder )) %>%
ggplot(aes(x = Participant.ID, y = Percent.Slowed, color = Participant.ID))+
geom_point()+
#geom_jitter(width = 0.15)+
theme(legend.position = 'none')+
ggtitle("Percentage Slowed")+
#geom_label(data = graph_RotByID, aes(x = Participant.ID, y = mean, label = round(mean, digits=2), fontface="bold"), size = 5)+
scale_y_continuous(name="Percent Slowed")
print(figSlowed)
#ROTATION
#X Rotation (Pitch)
plotAndAnova("X Rotation (Pitch)", "./Tests./Rotation X", "./Plots./Rotation",
Data_avg_noErr, FALSE, "X.Pitch", "Absolute Rotation (degrees)", c(NA, 1000))
#Y Rotation (Yaw)
plotAndAnova("Y Rotation (Yaw)", "./Tests./Rotation Y", "./Plots./Rotation",
Data_avg_noErr, FALSE, "Y.Yaw", "Absolute Rotation (degrees)", c(NA, 600))
#Z Rotation (Roll)
plotAndAnova("Z Rotation (Roll)", "./Tests./Rotation Z", "./Plots./Rotation",
Data_avg_noErr, FALSE, "Z.Roll", "Absolute Rotation (degrees)", c(NA, 750))
#Total Rotation
plotAndAnova("Total Rotation", "./Tests./Rotation Total", "./Plots./Rotation",
Data_avg_noErr, FALSE, "Total.Rotation", "Absolute Rotation (degrees)", c(NA, 2250))
#X Rotation (Pitch) Per Second
plotAndAnova("X Rotation (Pitch)", "./Tests./Rotation X per second", "./Plots./Rotation Per Second",
Data_avg_noErr, FALSE, "rotSpeedX", "Rotation (degrees per second)", c(10, 35))
#Y Rotation (Yaw) Per Second
plotAndAnova("Y Rotation (Yaw)", "./Tests./Rotation Y per second", "./Plots./Rotation Per Second",
Data_avg_noErr, FALSE, "rotSpeedY", "Rotation (degrees per second)", c(10, 35))
#Z Rotation (Roll) Per Second
plotAndAnova("Z Rotation (Roll)", "./Tests./Rotation Z per second", "./Plots./Rotation Per Second",
Data_avg_noErr, FALSE, "rotSpeedZ", "Rotation (degrees per second)")
#ROTATION BY PARTICIPANT
#X, total
graph_RotByID_X <- ddply(Data_avg_noErr, .(Participant.ID), summarise, mean = mean(X.Pitch))
figRotByID_X <-  Data_avg_noErr %>%
filter(Condition != "Control") %>%
#mutate(Participant.ID = factor(Participant.ID, levels=defaultOrder )) %>%
ggplot(aes(x = Participant.ID, y = X.Pitch, color = Participant.ID))+
geom_point()+
#geom_jitter(width = 0.15)+
theme(legend.position = 'none')+
ggtitle("Rotation - Pitch")+
#geom_label(data = graph_RotByID, aes(x = Participant.ID, y = mean, label = round(mean, digits=2), fontface="bold"), size = 5)+
scale_y_continuous(name="Total change in pitch (degrees)")
print(figRotByID_X)
#Y, total
graph_RotByID_Y <- ddply(Data_avg_noErr, .(Participant.ID), summarise, mean = mean(Y.Yaw))
figRotByID_Y <-  Data_avg_noErr %>%
filter(Condition != "Control") %>%
#mutate(Participant.ID = factor(Participant.ID, levels=defaultOrder )) %>%
ggplot(aes(x = Participant.ID, y = Y.Yaw, color = Participant.ID))+
geom_point()+
#geom_jitter(width = 0.15)+
theme(legend.position = 'none')+
ggtitle("Rotation - Yaw")+
#geom_label(data = graph_RotByID, aes(x = Participant.ID, y = mean, label = round(mean, digits=2), fontface="bold"), size = 5)+
scale_y_continuous(name="Total change in yaw (degrees)")
print(figRotByID_Y)
#Z, total
graph_RotByID_Z <- ddply(Data_avg_noErr, .(Participant.ID), summarise, mean = mean(Z.Roll))
figRotByID_Z <-  Data_avg_noErr %>%
filter(Condition != "Control") %>%
#mutate(Participant.ID = factor(Participant.ID, levels=defaultOrder )) %>%
ggplot(aes(x = Participant.ID, y = Z.Roll, color = Participant.ID))+
geom_point()+
#geom_jitter(width = 0.15)+
theme(legend.position = 'none')+
ggtitle("Rotation - Roll")+
#geom_label(data = graph_RotByID, aes(x = Participant.ID, y = mean, label = round(mean, digits=2), fontface="bold"), size = 5)+
scale_y_continuous(name="Total change in roll (degrees)")
print(figRotByID_Z)
#X, per second
graph_RotByID_X_time <- ddply(Data_avg_noErr, .(Participant.ID), summarise, mean = mean(rotSpeedX))
figRotByID_X_time <-  Data_avg_noErr %>%
filter(Condition != "Control") %>%
#mutate(Participant.ID = factor(Participant.ID, levels=defaultOrder )) %>%
ggplot(aes(x = Participant.ID, y = rotSpeedX, color = Participant.ID))+
geom_point()+
#geom_jitter(width = 0.15)+
theme(legend.position = 'none')+
ggtitle("Rotation per second - Pitch")+
#geom_label(data = graph_RotByID, aes(x = Participant.ID, y = mean, label = round(mean, digits=2), fontface="bold"), size = 5)+
scale_y_continuous(name="Change in pitch (degrees/second)")
print(figRotByID_X_time)
#Y, per second
graph_RotByID_Y_time <- ddply(Data_avg_noErr, .(Participant.ID), summarise, mean = mean(rotSpeedY))
figRotByID_Y_time <-  Data_avg_noErr %>%
filter(Condition != "Control") %>%
#mutate(Participant.ID = factor(Participant.ID, levels=defaultOrder )) %>%
ggplot(aes(x = Participant.ID, y = rotSpeedY, color = Participant.ID))+
geom_point()+
#geom_jitter(width = 0.15)+
theme(legend.position = 'none')+
ggtitle("Rotation per second - Yaw")+
#geom_label(data = graph_RotByID, aes(x = Participant.ID, y = mean, label = round(mean, digits=2), fontface="bold"), size = 5)+
scale_y_continuous(name="Change in yaw (degrees/second)")
print(figRotByID_Y_time)
#Z, per second
graph_RotByID_Z_time <- ddply(Data_avg_noErr, .(Participant.ID), summarise, mean = mean(rotSpeedZ))
figRotByID_Z_time <-  Data_avg_noErr %>%
filter(Condition != "Control") %>%
#mutate(Participant.ID = factor(Participant.ID, levels=defaultOrder )) %>%
ggplot(aes(x = Participant.ID, y = rotSpeedZ, color = Participant.ID))+
geom_point()+
#geom_jitter(width = 0.15)+
theme(legend.position = 'none')+
ggtitle("Rotation per second - Roll")+
#geom_label(data = graph_RotByID, aes(x = Participant.ID, y = mean, label = round(mean, digits=2), fontface="bold"), size = 5)+
scale_y_continuous(name="Change in pitch (degrees/second)")
print(figRotByID_Z_time)
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
warnings()
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
View(data1)
View(data2)
data1$Result
data2$Result
data1$Result == data2$Result
data1$Result != data2$Result
typeof(data1$Result)
all(data1$Result == data2%Result)
compare = data1$Result == data2$Result
compare
all(compare)
compare[1] = TRUE
compare
all(compare)
all(data1$Result == data2$Result)
!all(compare)
all(compare)
compare
compare[1] = FALSE
all(compare)
!all(compare)
source("compareCSVs.R")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
warnings()
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
View(discList)
discList[1]
toString(discList[1])
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
source("compareCSVs.R")
compareCSVs("./Tests", "./Tests./Acuity", "./Tests./Acuity Comparisons")
